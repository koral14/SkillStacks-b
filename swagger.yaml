openapi: 3.0.0
info:
  title: Flashcards API
  version: 1.0.0
  description: An Express Flashcards API
servers:
  - url: http://localhost:8000
    variables: {}
paths:
  /api/v1/user/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - firstName
                - lastName
                - role
                - password
              properties:
                username:
                  type: string
                  description: username
                email:
                  type: string
                  description: user's email
                firstName:
                  type: string
                  description: first name of the user
                lastName:
                  type: string
                  description: last name of the user
                role:
                  type: string
                  description: "User role (choose from available options: student, mentor, apprentice, admin)"
                  enum: ["Student", "Mentor", "Apprentice", "Admin"]
                password:
                  type: string
                  description: password
      responses:
        200:
          description: The user was successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  userId:
                    type: string
                  token:
                    type: string
                    description: JWT token for authentication
                  expiresIn:
                    type: integer
                    description: JWT token expiration time in milliseconds
        500:
          description: Some server error
  /api/v1/user/login:
    post:
      summary: User login
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
      responses:
        200:
          description: The user successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              token:
                type: string
                description: JWT token for authentication
              expiresIn:
                type: string
                description: JWT token expiration time in milliseconds
        401:
          description: Invalid email or password
        500:
          description: Some server error
          content:
            application/json:
              example:
                error: Internal server error

  /api/v1/user/{id}:
    get:
      summary: Returns a single user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: A registered user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/v1/user/logout:
    post:
      summary: Loggs out the user
      tags: [Users]
      responses:
        200:
          description: Successfully logged out
        500:
          description: Some server error
          content:
            application/json:
              example:
                error: Internal server error
  /api/v1/flashcard:
    post:
      summary: Create a new flashcard
      tags: [Flashcards]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Flashcard"
      security:
        - bearerAuth: []
      responses:
        201:
          description: Flashcard created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flashcard"
        500:
          description: Internal server error
    get:
      summary: Get flashcards for the logged-in user
      tags: [Flashcards]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items per page
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of flashcards
          content:
            application/json:
              schema:
                type: object
                properties:
                  flashcards:
                    type: array
                    items:
                      $ref: "#/components/schemas/Flashcard"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalItems:
                    type: integer
        500:
          description: Internal server error
  /api/v1/flashcard/{id}:
    get:
      summary: Get a specific flashcard
      tags: [Flashcards]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the flashcard
      security:
        - bearerAuth: []
      responses:
        200:
          description: Flashcard retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flashcard"
        404:
          description: Flashcard not found
        500:
          description: Internal server error
    delete:
      summary: Delete a specific flashcard
      tags: [Flashcards]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the flashcard
      responses:
        200:
          description: Flashcard deleted successfully
        400:
          description: Flashcard not found
        500:
          description: Internal server error
    patch:
      summary: Partially update a flashcard
      tags: [Flashcards]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the flashcard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The updated question
                answer:
                  type: string
                  description: The updated answer
                resources:
                  type: string
                  description: The updated resources
                hint:
                  type: string
                  description: The updated hint
                deck:
                  type: string
                  description: The updated deck ID
      responses:
        200:
          description: Flashcard updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flashcard"
        400:
          description: Bad request, check your request payload
        404:
          description: Flashcard not found
        500:
          description: Internal server error
  /api/v1/flashcardsAll:
    get:
      summary: Get all flashcards for unauthenticated users
      tags: [Flashcards]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items per page
      responses:
        200:
          description: List of flashcards for unauthenticated users
          content:
            application/json:
              schema:
                type: object
                properties:
                  flashcards:
                    type: array
                    items:
                      $ref: "#/components/schemas/Flashcard"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalItems:
                    type: integer
        500:
          description: Internal server error
  /api/v1/deck:
    post:
      summary: Create a deck by a user
      tags: [Decks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deck"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Deck created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckResponse"
      examples:
        "deck_creation_example":
          value:
            topic: "string"
            subtopic: "string"
            isPublic: true
            createdBy: "65708ef68a3a1126502dbab7"
            flashcards:
              - _id: "657122779cdf62424bdcc864"
                question: "question-new2"
                answer: "answer1"
                resources: "resrouces example"
                hint: "this is the hint"
                deck: "6571225b9cdf62424bdcc862"
            createdBy: "65708ef68a3a1126502dbab7"
    get:
      summary: Get all decks for a user
      tags: [Decks]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Items per page
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of user decks
          content:
            application/json:
              schema:
                type: object
                properties:
                  decks:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeckWithDetailedFlashcards"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalItems:
                    type: integer
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                msg: Internal server error
  /api/v1/deck/{id}:
    get:
      summary: Get a deck by ID for an authenticated user
      tags: [Decks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the deck
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A deck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
        "404":
          description: Deck not found
          content:
            application/json:
              example:
                msg: Deck not found
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                msg: Internal server error
    patch:
      summary: Update a deck by ID for an authenticated user
      tags: [Decks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the deck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
                  description: The updated topic for the deck
                subtopic:
                  type: string
                  description: The updated subtopic for the deck
                isPublic:
                  type: boolean
                  description: The updated visibility status of the deck
                flashcards:
                  type: array
                  items:
                    type: string
                  description: An array of flashcard IDs to associate with the deck
              example:
                topic: "Updated Topic"
                subtopic: "Updated Subtopic"
                isPublic: true
                flashcards:
                  - "65708ef68a3a1126502dbab7"
                  - "657154f878388caa84d94ffb"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Updated deck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
              example:
                deck:
                  _id: "657154f878388caa84d94ffb"
                  topic: "deck3--update"
                  subtopic: "sub"
                  isPublic: false
                  createdBy: "65708ef68a3a1126502dbab7"
                  flashcards: []
                  createdAt: "2023-12-07T05:15:36.447Z"
                  updatedAt: "2023-12-07T05:16:30.601Z"
                  __v: 0
        "400":
          description: Bad request
          content:
            application/json:
              example:
                msg: No fields to update
        "404":
          description: Deck not found
          content:
            application/json:
              example:
                msg: Deck not found
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                msg: Internal server error
    delete:
      summary: Delete a deck by ID for an authenticated user
      tags: [Decks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the deck
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Deck deleted
          content:
            application/json:
              example:
                msg: Deck deleted
        "404":
          description: Deck not found
          content:
            application/json:
              example:
                msg: Deck not found
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                msg: Internal server error
  /api/v1/decksAll:
    get:
      summary: Get all decks for unauthenticated users
      tags: [Decks]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Items per page
      responses:
        "200":
          description: A list of decks
          content:
            application/json:
              schema:
                type: object
                properties:
                  decks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Deck"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalItems:
                    type: integer
        "500":
          description: Internal server error
          content:
            application/json:
              example:
                msg: Internal server error
components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - role
        - password
      properties:
        username:
          type: string
          description: username
        email:
          type: string
          description: user's email
        firstName:
          type: string
          description: first name of the user
        lastName:
          type: string
          description: last name of the user
        role:
          type: string
          description: choose from available options of Mentor, Student, Apprentice, or Admin
          enum: ["Student", "Mentor", "Apprentice", "Admin"]
        password:
          type: string
          description: password
      example:
        username: johnDoe-new
        email: johndoe100@gmail.com
        firstName: John
        lastName: Doe
        role: Student
        password: SecretPassword#!
    Flashcard:
      type: object
      required:
        - question
        - answer
        - deck
        - createdBy
      properties:
        question:
          type: string
          description: The question for the flashcard
        answer:
          type: string
          description: The answer for the flashcard
        resources:
          type: string
          description: Additional resources related to the flashcard
        hint:
          type: string
          description: A hint for the flashcard
        deck:
          type: object
          description: Any flashcard should be part of a deck
          example: "654e88a264619fb725dd2bc3"
        createdBy:
          type: string
          description: ID of the user who created the flashcard
          example: "653dc07c5983616238888ca0"
      example:
        question: "What is the capital of France?"
        answer: "Paris"
        resources: "https://en.wikipedia.org/wiki/Paris"
        hint: "Think about famous landmarks."
        deck: "654e88a264619fb725dd2bc3"
        createdBy: "653dc07c5983616238888ca0"
    Deck:
      type: object
      properties:
        topic:
          type: string
        subtopic:
          type: string
        isPublic:
          type: boolean
        createdBy:
          type: string
        flashcards:
          type: array
          items:
            type: string
      example:
        topic: "string"
        subtopic: "string"
        isPublic: true
        createdBy: "65708ef68a3a1126502dbab7"
        flashcards: []
    DeckResponse:
      type: object
      properties:
        deck:
          $ref: "#/components/schemas/Deck"
    DeckWithDetailedFlashcards:
      type: object
      properties:
        _id:
          type: string
        topic:
          type: string
        subtopic:
          type: string
        isPublic:
          type: boolean
        createdBy:
          type: string
        flashcards:
          type: array
          items:
            $ref: "#/components/schemas/DetailedFlashcard"
        createdAt:
          type: string
        updatedAt:
          type: string
        __v:
          type: integer
        isFavorite:
          type: boolean

    DetailedFlashcard:
      type: object
      properties:
        _id:
          type: string
        question:
          type: string
        answer:
          type: string
        resources:
          type: string
        hint:
          type: string
        deck:
          type: string
        createdBy:
          type: string
securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
tags:
  - name: Users
    description: The Users managing API
  - name: Flashcards
    description: The Flashcards API
  - name: Decks
    description: The Decks API
